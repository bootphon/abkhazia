#!/usr/bin/env bash
#
# Copyright 2022 KHENTOUT Manel
#
# This file is part of abkhazia: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Abkhazia is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with abkahzia. If not, see <http://www.gnu.org/licenses/>.


# This script configures abkhazia before installation. It checks if
# dependancies are installed (kaldi, sox, shorten and CMU dict) and
# setup the path to kaldi. It also creates the following files in
# ./abkhazia/share
#
# - abkhazia.conf default configuration file
# - path.sh and cmd.sh used by kaldi recipes
#
# Until all is correctly configured, the script fails with an error
# message advising you how to fix the issue. Fix it and rerun the
# script until it succeed.

# equivalent to $(readlink -f $1) but in pure bash (compatible with
# mac OS)
function realpath {
    pushd `dirname $1` > /dev/null
    echo $(pwd -P)
    popd > /dev/null
}

# called when a configuration error occurs
function failure {
    echo "Configuration failed !

$1

Please fix the problem and run this script again";
    exit 1;
}


# absolute path to the abkhazia setup directory
setupdir=$(realpath $0)

# path to the share directory in abkhazia
share=$setupdir/abkhazia/share

# download the CMU pronouncing dictionary if not present
cmu_url="http://svn.code.sf.net/p/cmusphinx/code/trunk/cmudict/cmudict.0.7a"
cmu_dic=$share/`basename $cmu_url`
if [ -e $cmu_dic ]
then
    echo "Found CMU dictionary as $cmu_dic"
else
    echo "Downloading CMU dictionary from $cmu_url..."
    wget --quiet $cmu_url -O $cmu_dic || failure "Fail to download $cmu_url"
fi


# check sox is installed
sox=`which sox`
sox_failure="sox not found on your system, please install it (see http://sox.sourceforge.net)"
[ ! -z $sox ] && echo "Found sox as $sox" || failure "$sox_failure"


# check shorten is installed
shorten=`which shorten`
shorten_failure="shorten not found on your system, please install it from
http://shnutils.freeshell.org/shorten/dist/src/shorten-3.6.1.tar.gz"
[ ! -z $shorten ] && echo "Found shorten as $shorten" || failure "$shorten_failure"


# check festival is installed
festival=`which festival`
festival_failure="festival not found on your system, please install it
(see http://www.cstr.ed.ac.uk/projects/festival)"
[ ! -z $festival ] && echo "Found festival as $festival" || failure "$festival_failure"


# configuring abkhazia.conf
conf_in=$share/abkhazia.conf.in
conf=$share/abkhazia.conf
if [ ! -e $conf ]; then
    # Init an empty configuration file if not existing
    echo "Writing $conf"
    cp $conf_in $conf
else
    echo "Found configuration file as $conf"

    # check all sections defined in abkhazia.conf.in are in abkhazia.conf
    sec_in=$(sed '/^#/d' $conf_in | grep -e '\[.*\]' | tr -d '[]' | sort)
    sec_out=$(sed '/^#/d' $conf | grep -e '\[.*\]' | tr -d '[]' | sort)
    [ ! "$sec_in" == "$sec_out" ] && failure "Some configuration sections are missing in $conf, please merge it from $conf_in"

    # check all parameters defined in abkhazia.conf.in are in abkhazia.conf
    sec_in=$(sed '/^#/d' $conf_in | grep -e '^.*:' | cut -d':' -f 1 | sort)
    sec_out=$(sed '/^#/d' $conf | grep -e '^.*:' | cut -d':' -f 1 | sort)
    [ ! "$sec_in" == "$sec_out" ] && failure "Some configuration parameters are missing in $conf, please merge it from $conf_in"
fi


# check if kaldi-directory is defined in the config file
kaldi=$(sed '/^#/d' $conf | grep kaldi-directory | cut -d: -f2 | sed 's/^ *//')
if [ -z $kaldi ]; then
    # kaldi not defined, take it from the KALDI_PATH variable
    [ -z $KALDI_PATH ] &&
        failure "Please set KALDI_PATH to the Kaldi root directory (Kaldi must be compiled)
Use for exemple: 'KALDI_PATH=/path/to/kaldi ./configure'"

    [ ! -d $KALDI_PATH ] &&
        failure "KALDI_PATH must be a directory"

    # get the absolute path
    KALDI_PATH=$(cd $KALDI_PATH; pwd -P)

    sed -i "s|kaldi-directory:$|kaldi-directory: $KALDI_PATH|" $conf || exit
    kaldi=$KALDI_PATH
fi

# check kaldi-directory is an existing directory
[ -d $kaldi ] && echo "Found kaldi root directory as $kaldi" ||
        failure "Please correct the path to the kaldi root directory in
KALDI_PATH,
$kaldi is not an existing directory"

# check sph2pipe is found in kaldi (also means kaldi is compiled)
sph2pipe="$kaldi/tools/sph2pipe_v2.5/sph2pipe"
[ -e $sph2pipe ] && echo "Found sph2pipe as $sph2pipe" ||
        failure "$sph2pipe not found in the kaldi distribution"

# check irstlm is installed
irstlm=$kaldi/tools/irstlm
[ -d $irstlm ] && echo "Found irstlm root directory as $irstlm" ||
        failure "Please install irstlm in kaldi tools:
    cd $kaldi/tools
    ./extras/install_irstlm.sh

Please do not source the tools/env.sh as indicated by that
script, this is already done for you."

# check srilm is installed
srilm=$kaldi/tools/srilm
[ -d $srilm ] && echo "Found srilm root directory as $srilm" ||
        failure "Please install srilm in kaldi tools:
    cd $kaldi/tools
    ./extras/install_srilm.sh

Please do not source the tools/env.sh as indicated by that
script, this is already done for you."

# configure and copy path.sh
sed "s|^KALDI_ROOT=|KALDI_ROOT=$kaldi|" $share/path.sh.in > $share/path.sh
echo "Configured $share/path.sh"

# all is good !!
echo "
Configuration succeed ! To continue installation please type:
    python setup.py build
    python setup.py install
"

exit 0
